#include <FreeRTOS.h>
#include <task.h>
#include <queue.h>
#include <stdio.h>

// Global variables
uint8_t G_DataID;
int32_t G_DataValue;

// Data type definition
typedef struct {
    uint8_t dataID;
    int32_t DataValue;
} Data_t;

// Task handles
TaskHandle_t TaskHandle_1;
TaskHandle_t TaskHandle_2;

// Queue handle
QueueHandle_t Queue1;

// Task prototypes
void ExampleTask1(void *pV);
void ExampleTask2(void *pV);

int main(void) {
    // Create queue
    Queue1 = xQueueCreate(5, sizeof(Data_t));

    // Create tasks
    xTaskCreate(ExampleTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, 1, &TaskHandle_1);
    xTaskCreate(ExampleTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, 1, &TaskHandle_2);

    // Start scheduler
    vTaskStartScheduler();

    // Should never reach here
    for(;;);
}

// Task to send data to the queue every 500ms
void ExampleTask1(void *pV) {
    Data_t data;

    for(;;) {
        // Populate data structure
        data.dataID = G_DataID;
        data.DataValue = G_DataValue;

        // Send data to the queue
        xQueueSend(Queue1, &data, portMAX_DELAY);

        // Delay for 500ms
        vTaskDelay(pdMS_TO_TICKS(500));
    }
}

// Task to receive data from the queue and process it
void ExampleTask2(void *pV) {
    Data_t data;
    UBaseType_t initialPriority = uxTaskPriorityGet(NULL);

    for(;;) {
        // Receive data from the queue
        if(xQueueReceive(Queue1, &data, portMAX_DELAY) == pdPASS) {
            // Print data
            printf("Received Data: dataID = %d, DataValue = %d\n", data.dataID, data.DataValue);

            // Process data
            if(data.dataID == 0) {
                // Delete ExampleTask2
                vTaskDelete(TaskHandle_2);
            } else if(data.dataID == 1) {
                // Allow processing of DataValue member
                if(data.DataValue == 0) {
                    // Increase priority by 2
                    vTaskPrioritySet(TaskHandle_2, initialPriority + 2);
                } else if(data.DataValue == 1) {
                    // Decrease priority if previously increased
                    vTaskPrioritySet(TaskHandle_2, initialPriority);
                } else if(data.DataValue == 2) {
                    // Delete ExampleTask2
                    vTaskDelete(TaskHandle_2);
                }
            }
        }
    }
}
